services:
  db:
    container_name: db
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: monitoring_docker
      POSTGRES_USER: vk
      POSTGRES_PASSWORD: 12345
    volumes:
      - .backend/db/init.sql:/docker-entrypoint-initdb.d
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "vk", "-d", "monitoring_docker" ]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    restart: always
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://kafka:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_LOG_DIRS: "/bitnami/kafka/data"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_JMX_PORT: 9102
      KAFKA_CFG_ZOOKEEPER_METADATA_MIGRATION_ENABLE: "false"
      KAFKA_CFG_METRICS_RECORDING_LEVEL: "INFO"
      KAFKA_KRAFT_CLUSTER_ID: "AwyYJhkoTAmpeLAJ_BMgHg"
      KAFKA_JMX_OPTS: "-javaagent:/jmx_exporter/jmx_prometheus_javaagent.jar=9103:/jmx_exporter/kafka.yml"
    volumes:
        - ./jmx_exporter:/jmx_exporter
        - ./kafka-logs:/bitnami/kafka
        - ./init_kafka.sh:/init_kafka.sh
    ports:
        - '9092:9092'
        - '9103:9103'
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'cat < /dev/null > /dev/tcp/kafka/9092' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka-init:
    container_name: kafka-init
    image: bitnami/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c", "/init_kafka.sh"]
    volumes:
      - ./init_kafka.sh:/init_kafka.sh
    restart: "no"

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DB_CONFIG: "db://vk:12345@db:5432/monitoring_docker"
      QUEUE_BROKER: "kafka:9092"
      PING_TOPIC: "pingTopic"


  pinger:
    container_name: pinger
    build:
      context: ./Pinger
      dockerfile: Dockerfile
    depends_on:
     kafka:
       condition: service_healthy
    environment:
      QUEUE_BROKER: kafka:9092
      PING_TOPIC: pingTopic
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock


  kafka-exporter:
    container_name: kafka-exporter
    image: danielqsj/kafka-exporter
    restart: always
    command:
      - "--kafka.server=kafka:9092"
      - "--web.listen-address=:9308"
    ports:
      - "9308:9308"
    depends_on:
      kafka:
        condition: service_healthy

  postgres-exporter:
    container_name: postgres-exporter
    image: wrouesnel/postgres_exporter
    restart: always
    environment:
      DATA_SOURCE_NAME: "postgresql://vk:12345@db:5432/monitoring_docker?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - db


  prometheus:
    container_name: prometheus
    image: prom/prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    depends_on:
      - kafka-exporter

  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/build:/usr/share/nginx/html
    ports:
      - "80:80"
    depends_on:
      - frontend

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: "http://nginx/api"
